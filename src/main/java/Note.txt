Lambdas Expression -> is an expression through with we can represent anonymous functions.
Anonymous functions -> methods that does not name or modifier.

SYNTAX :  Parameter Expression Body
            ()         ->       System.out.println("Lambda Expressions")

Functional Interfaces ->  these are interfaces that contains only one abstract method.
                          functional interfaces can also have default and static methods but only one abstract method.

                                  STREAM API
Stream API -> is used to process collection of objects. A stream is a sequence of objects that supports various methods
              which cn be pipelined to produce various results.

              A stream is not a data structure, instead it takes input from the collections, Arrays or I/O channels

              Streams don't change the data structure, they only provide the results as per the pipelined methods.

                                        WHY STREAM API
        1. Functional programming
        2. Code reduction
        3. Bulk Operation

Consumer Functional Interface ->  Consumer<T> is an inbuilt interface in java 8. consumer can be used in all
                                  context where an Object needs to be consumed i.e taken in as an input and
                                  some operations needs to be performed on the object without returning any result.

Predicate Functional Interface -> This is a functional interface used for conditional check where you think.
                                  we can use these true/false returning functions in day to day programming we
                                  should choose predicates.
                                  the return type of this interface is a boolean.

Supplier  Functional Interface -> This is used in all contexts where there is no input but an output is expected

                                        METHODS IN STREAM API
            1. Filter method -> for conditional checks.
            2. ForEach method -> for iteration.
            3. Map -> used for transformation.
                      map() takes a stream as input and returns a stream.
                      it is a mapper function that produces a single value for each input value. Hence, it is also called one to one mapping.
            4. Flat Map -> used for transformation and flattering    (map + flattering).
                            it is a mapper function that produces multiple values for each input value. Hence, it is also called one to many mapping.

                            NOTE : when to use map -> when you have a stream and you want to transform it to another stream
                                   when to use flatMap - > when you have multiple streams, and you want to transform it to a single stream.

            5. Optionals -> Used to handle nullability of an object
                            1. empty -> returns an empty optional instance
                            2. of -> returns an optional of specified present non-null value
                            3. ofNullable -> returns an optional of specified present non-null value otherwise returns an empty optional

            6. Reduce -> Used in Aggregating Data
                         * It combines elements of a stream and produces a single value.
                         * The reduce() has 2 argument i.e Identity and Accumulator
                         * The Identity is initial value of type T
                         * The Accumulator which is a BinaryOperator<T> is a function for combining two values.

            7. Parallel stream -> this is a feature in java 8 meant for utilizing multiple core of the processor.

                                  * Normally java code has one stream of processing where it is executed sequentially.
                                    whereas, by using parallel stream, we can divide the code into multiple streams that are
                                    executed into parallel on separate cores and the final result is the combination of the individual outcomes.
                                  * the order of execution however is not under our control.


